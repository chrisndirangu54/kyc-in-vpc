AWSTemplateFormatVersion: '2010-09-09'
Description: Tradle third party KYC services stack
Parameters:

  Namespace:
    Type: String
    Default: ""

  S3TemplatesBaseUrl:
    Type: String
    Default: https://tradle.io.s3.amazonaws.com/cf-templates/kyc-in-ecs/1.1.0

  # VPC

  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 1st availability zone

  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 2nd availability zone

  AZ3:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 3rd availability zone

  PublicSubnet1CIDR:
    Type: String
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Default: 10.0.10.0/24

  PublicSubnet2CIDR:
    Type: String
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Default: 10.0.11.0/24

  PublicSubnet3CIDR:
    Type: String
    Description: IP range (CIDR notation) for the public subnet in the third Availability Zone
    Default: 10.0.12.0/24

  PrivateSubnet1CIDR:
    Type: String
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Default: 10.0.20.0/24

  PrivateSubnet2CIDR:
    Type: String
    Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
    Default: 10.0.21.0/24

  PrivateSubnet3CIDR:
    Type: String
    Description: IP range (CIDR notation) for the private subnet in the third Availability Zone
    Default: 10.0.22.0/24

  # ECS

  # ECSAMI:
  #   Description: AMI id
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #   Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

  InstanceType:
    Type: String
    Description: EC2 Instance type to run services on
    Default: m5.xlarge
    AllowedValues:
      # - t2.micro
      # - t2.small
      # - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
    ConstraintDescription: Please choose a valid instance type.

  EnableTruefaceSpoof:
    Type: String
    Description: enable TrueFace Spoof service
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  EnableRankOne:
    Type: String
    Description: enable RankOne service
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  TruefaceSpoofImage:
    Type: String
    Default: 210041114155.dkr.ecr.us-east-1.amazonaws.com/trueface-spoof:1.1.0

  RankOneImage:
    Type: String
    Default: 210041114155.dkr.ecr.us-east-1.amazonaws.com/rank-one:1.1.0

  NginxImage:
    Type: String
    Default: 210041114155.dkr.ecr.us-east-1.amazonaws.com/tradle-kyc-nginx-proxy:1.0.0

  TruefaceSpoofPath:
    Type: String
    Description: root path segement of TrueFace Spoof API
    Default: "trueface-spoof"
    # AllowedPattern: "^[a-zA-Z0-9\\-]+$"
    AllowedValues:
      - 'trueface-spoof'
    ConstraintDescription: "path not editable at this time, use value: trueface-spoof"

  RankOnePath:
    Type: String
    Description: root path segement of RankOne API
    Default: "rank-one"
    # AllowedPattern: "^[a-zA-Z0-9\\-]+$"
    AllowedValues:
      - 'rank-one'
    ConstraintDescription: "path not editable at this time, use value: rank-one"

  DesiredTaskCount:
    Type: Number
    Description: how many instances of each service you want to run in parallel
    Default: 1

  # Optional

  VolumeType:
    Type: String
    Description: if you need data volumes attached to the cluster instances, specify the type
    Default: ""
    AllowedValues:
      - ""
      - io1
      - gp2
      - st1
      - sc1

  VolumeSize:
    Type: Number
    Description: if you need data volumes attached to the cluster instances, specify the size
    Default: 100

  S3PathToWriteDiscovery:
    Type: String
    Description: |
      S3 path to write discovery info to
      This is typically something like: tdl-xxxx-ltd-private-conf-bucket-xyz/ecs-services.json

  S3PathToRankOneLicense:
    Type: String
    Default: ''
    Description: |
      S3 path to retrieve RankOne license
      This is typically something like: tdl-xxxx-ltd-private-conf-bucket-xyz/license/ROC.lic

  S3PathToTrueFaceLicense:
    Type: String
    Default: ''
    Description: |
      S3 path to retrieve TrueFace license
      This is typically something like: tdl-xxxx-ltd-private-conf-bucket-xyz/license/trueface-creds.json

  # DNSName:
  #   Type: String
  #   Description: DNS name to register
  #   Default: ""

  KeyName:
    Type: String
    Description: SSH Key name to access the machine
    Default: ""

  LoadBalancerCertificateArn:
    Description: optional Amazon Resource Name (ARN) of the certificate to associate with the load balancer.
    Type: String
    Default: ''

  AllowEgressFromECS:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  SSHAccess: !Not [!Equals [ !Ref KeyName, ""]]
  # RegisterDNS: !Not [!Equals [ !Ref DNSName, ""]]
  UseTruefaceSpoof: !Equals [!Ref EnableTruefaceSpoof, "true"]
  UseRankOne: !Equals [!Ref EnableRankOne, "true"]

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplatesBaseUrl}/vpc.yml
      Parameters:
        Namespace: !Join ["", [!Ref Namespace, !Ref "AWS::StackName"]]
        VpcCIDR: !Ref VpcCIDR
        AZ1: !Ref AZ1
        AZ2: !Ref AZ2
        AZ3: !Ref AZ3
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PublicSubnet3CIDR: !Ref PublicSubnet3CIDR
        PrivateSubnet1CIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2CIDR: !Ref PrivateSubnet2CIDR
        PrivateSubnet3CIDR: !Ref PrivateSubnet3CIDR
        EnableSSHAccess: !If
          - SSHAccess
          - "true"
          - "false"

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplatesBaseUrl}/security-groups.yml
      Parameters:
        Namespace: !Join ["", [!Ref Namespace, !Ref "AWS::StackName"]]
        VPC: !GetAtt VPC.Outputs.VPC
        KeyName: !Ref KeyName
        AllowEgressFromECS: !Ref AllowEgressFromECS

  BastionHost:
    Condition: SSHAccess
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplatesBaseUrl}/bastion.yml
      Parameters:
        KeyName: !Ref KeyName
        Subnet: !GetAtt VPC.Outputs.PublicSubnet1
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplatesBaseUrl}/load-balancers.yml
      Parameters:
        Namespace: !Join ["", [!Ref Namespace, !Ref "AWS::StackName"]]
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
        CertificateArn: !Ref LoadBalancerCertificateArn

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${S3TemplatesBaseUrl}/ecs.yml
      Parameters:
        Namespace: !Join ["", [!Ref Namespace, !Ref "AWS::StackName"]]
        VPC: !GetAtt VPC.Outputs.VPC
        # ECSAMI: !Ref ECSAMI
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets
        AvailabilityZones: !GetAtt VPC.Outputs.AvailabilityZones
        InstanceType: !Ref InstanceType
        VolumeSize: !Ref VolumeSize
        VolumeType: !Ref VolumeType
        # Iops: !Ref Iops
        KeyName: !Ref KeyName
        # InstanceTenancy: !Ref InstanceTenancy
        ALBUrl: !GetAtt ALB.Outputs.LoadBalancerUrl
        S3PathToWriteDiscovery: !Ref S3PathToWriteDiscovery
        S3PathToRankOneLicense: !Ref S3PathToRankOneLicense
        S3PathToTrueFaceLicense: !Ref S3PathToTrueFaceLicense
        DesiredTaskCount: !Ref DesiredTaskCount
        ALBListener: !GetAtt ALB.Outputs.Listener
        EnableTruefaceSpoof: !Ref EnableTruefaceSpoof
        EnableRankOne: !Ref EnableRankOne
        TruefaceSpoofImage: !Ref TruefaceSpoofImage
        RankOneImage: !Ref RankOneImage
        NginxImage: !Ref NginxImage
        TruefaceSpoofPath: 'trueface-spoof'
        RankOnePath: 'rank-one'

  # KYC sub-stack was collapsed into ECS because of this:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html
  #
  #   When you use Auto Scaling or Amazon Elastic Compute Cloud (Amazon EC2) to create container instances
  #   for an Amazon ECS cluster, the Amazon ECS service resource must have a dependency on the
  #   Auto Scaling group or Amazon EC2 instances
  #
  # this required DependsOn ECSService -> AutoScalingGroup makes it really hard to separate the two

  # KYC:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: VPC
  #   Properties:
  #     TemplateURL: !Sub ${S3TemplatesBaseUrl}/kyc.yml
  #     Parameters:
  #       Namespace: !Join ["", [!Ref Namespace, !Ref "AWS::StackName"]]
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       Cluster: !GetAtt ECS.Outputs.Cluster
  #       DesiredTaskCount: !Ref DesiredTaskCount
  #       # AvailabilityZones: !GetAtt VPC.Outputs.AvailabilityZones
  #       ALBListener: !GetAtt ALB.Outputs.Listener
  #       AutoScalingGroup: !GetAtt ECS.Outputs.AutoScalingGroup
  #       EnableTruefaceSpoof: !Ref EnableTruefaceSpoof
  #       EnableTruefaceDash: !Ref EnableTruefaceDash
  #       EnableRankOne: !Ref EnableRankOne
  #       # TruefaceSpoofPath: !Ref TruefaceSpoofPath
  #       # TruefaceDashPath: !Ref TruefaceDashPath
  #       # RankOnePath: !Ref RankOnePath
  #       TruefaceSpoofPath: 'trueface-spoof'
  #       TruefaceDashPath: 'trueface-dash'
  #       RankOnePath: 'rank-one'

  # DNS:
  #   Type: AWS::CloudFormation::Stack
  #   Condition: RegisterDNS
  #   Properties:
  #     TemplateURL: !Sub ${S3TemplatesBaseUrl}/dns.yml
  #     Parameters:
  #       DNSName: !Ref DNSName
  #       AliasedHostedZoneId: !GetAtt ALB.Outputs.CanonicalHostedZoneNameID
  #       AliasedDNSName: !GetAtt ALB.Outputs.LoadBalancerUrl

Outputs:
  VPC:
    Description: KYC services stack VPC
    Value: !GetAtt VPC.Outputs.VPC

  ECSCluster:
    Description: ECS cluster
    Value: !GetAtt ECS.Outputs.Cluster

  ECSService:
    Value: !GetAtt ECS.Outputs.ECSService

  LoadBalancerDNSName:
    Description: DNS name
    Value: !GetAtt ALB.Outputs.LoadBalancerUrl

  TruefaceSpoofApiUrl:
    Condition: UseTruefaceSpoof
    Description: TrueFace spoof API base url
    Value: !Join
      - "/"
      - - !GetAtt ALB.Outputs.LoadBalancerUrl
        - !Ref TruefaceSpoofPath
        - "spdetect"

  RankOneApiUrl:
    Condition: UseRankOne
    Description: RankOne API base url
    Value: !Join
      - "/"
      - - !GetAtt ALB.Outputs.LoadBalancerUrl
        - !Ref RankOnePath

  BastionHost:
    Condition: SSHAccess
    Description: Bastion host, to allow SSH'ing into container instances
    Value: !GetAtt BastionHost.Outputs.PublicDNSName

  BastionPublicIP:
    Condition: SSHAccess
    Value: !GetAtt BastionHost.Outputs.PublicIP

  Region:
    Value: !Ref AWS::Region

  AvailabilityZones:
    Description: availability zones
    Value: !GetAtt VPC.Outputs.AvailabilityZones

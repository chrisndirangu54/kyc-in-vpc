AWSTemplateFormatVersion: '2010-09-09'
Description: ECS cluster
Parameters:
  Namespace:
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id

  # ECSAMI:
  #   Description: AMI id
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

  SecurityGroup:
    Description: security group for ECS hosts
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Description: subnets to run ECS service in
    Type: List<AWS::EC2::Subnet::Id>

  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>

  InstanceType:
    Type: String
    Description: ECS instance type

  ALBUrl:
    Type: String

  S3PathToWriteDiscovery:
    Type: String

  # ServiceENIIP:
  #   Type: String
  #   Description: Private IP for ENI

  # ClusterSize:
  #   Type: Number
  #   Default: 1

  VolumeSize:
    Type: Number
    Default: 100

  VolumeType:
    Type: String
    Default: gp2

  KeyName:
    Type: String
    Description: SSH Key name to access the machine
    Default: ""

  DesiredTaskCount:
    Type: Number

  ALBListener:
    Description: Application Load Balancer listener to register with
    Type: String

  # EnableTruefaceDash:
  #   Type: String

  EnableTruefaceSpoof:
    Type: String

  EnableRankOne:
    Type: String

  TruefaceSpoofImage:
    Type: String

  RankOneImage:
    Type: String

  NginxImage:
    Type: String

  TruefaceSpoofPath:
    Type: String

  # TruefaceDashPath:
  #   Type: String

  RankOnePath:
    Type: String

  EnableFindface:
    Type: String

  FindfaceImage:
    Type: String
  
  FindfacePath:
    Type: String

Conditions:
  SSHAccess: !Not [!Equals [ !Ref KeyName, ""]]
  NeedsVolume: !Not [!Equals [ !Ref VolumeType, ""]]
  ShouldSaveDiscovery: !Not [!Equals [ !Ref S3PathToWriteDiscovery, ""]]
  UseTruefaceSpoof: !Equals [!Ref EnableTruefaceSpoof, "true"]
  # UseTruefaceDash: !Equals [!Ref EnableTruefaceDash, "true"]
  UseRankOne: !Equals [!Ref EnableRankOne, "true"]
  UseFindface: !Equals [!Ref EnableFindface, "true"]

Mappings:
  # source:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
# START_AMIS
  AWSRegionToAMI:
    us-east-2:
      AMI: ami-09a64272e7fe706b6
    us-east-1:
      AMI: ami-0b9a214f40c38d5eb
    us-west-2:
      AMI: ami-00430184c7bb49914
    us-west-1:
      AMI: ami-0e7dd5fe55b87a5fe
    eu-west-3:
      AMI: ami-06b685336aa497c15
    eu-west-2:
      AMI: ami-0209769f0c963e791
    eu-west-1:
      AMI: ami-05b65c0f6a75c1c64
    eu-central-1:
      AMI: ami-0bb804e8cd910a664
    ap-northeast-2:
      AMI: ami-0d947b1901b27a37c
    ap-northeast-1:
      AMI: ami-08681de00a0aae54f
    ap-southeast-2:
      AMI: ami-05b48eda7f92aadbe
    ap-southeast-1:
      AMI: ami-0a3f70f0255af1d29
    ca-central-1:
      AMI: ami-00d1bdbd447b5933a
    ap-south-1:
      AMI: ami-0590d0dd683026eab
    sa-east-1:
      AMI: ami-01bca91ecf4c1f494

# END_AMIS

  repo:
    ecr:
      nginx: tradle-kyc-nginx-proxy
      truefaceSpoof: trueface-spoof
      # truefaceDash: trueface-dash
      rankOne: rank-one
      findface: tradle-findface

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref Namespace

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Namespace}-ecs-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        # includes:
        # - ecs:CreateCluster
        # - ecs:DeregisterContainerInstance
        # - ecs:DiscoverPollEndpoint
        # - ecs:Poll
        # - ecs:RegisterContainerInstance
        # - ecs:StartTelemetrySession
        # - ecs:Submit*
        # - ecr:GetAuthorizationToken
        # - ecr:BatchCheckLayerAvailability
        # - ecr:GetDownloadUrlForLayer
        # - ecr:BatchGetImage
        # - logs:PutLogEvents
        # - logs:CreateLogStream

      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
              - ec2:DescribeVolumes
              - ec2:DescribeSnapshots
              - ec2:CreateSnapshot
              - ec2:AttachVolume
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - route53:*
              - cloudformation:DescribeStacks
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:DescribeStackResources
            Resource: !Ref "AWS::StackId"
          - !If
            - ShouldSaveDiscovery
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub arn:aws:s3:::${S3PathToWriteDiscovery}
            - !Ref AWS::NoValue

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailabilityZones
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      VPCZoneIdentifier: !Ref Subnets
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${Namespace}-ecs-instance
          PropagateAtLaunch: true
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 33 # at least 1 instance
      ResourceSignal:
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MinSuccessfulInstancesPercent: 33 # at least 1 instance
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  # ServiceENI:
  #   Type: AWS::EC2::NetworkInterface
  #   Properties:
  #     # Tags:
  #     #   - Key: foo
  #     #     Value: bar
  #     Description: ENI for EC2 instance to attach to in order to have a stable MAC Address
  #     SourceDestCheck: 'false'
  #     GroupSet:
  #       - !Ref SecurityGroup
  #     SubnetId: !Select [ 0, !Ref Subnets ]
  #     PrivateIpAddress: !Ref ServiceENIIP

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      # copy-pasted from eth stack
      # can this be set to false?
      AssociatePublicIpAddress: true
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If
        - SSHAccess
        - !Ref KeyName
        - !Ref "AWS::NoValue"
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      BlockDeviceMappings:
        - !If
          - NeedsVolume
          - DeviceName: "/dev/sdh"
            Ebs:
              VolumeSize: !Ref VolumeSize
              VolumeType: !Ref VolumeType
          - !Ref AWS::NoValue
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          set -x
          yum install -y aws-cfn-bootstrap jq
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
              nano: []
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                echo -e 'ECS_CLUSTER=${ECSCluster}' >> /etc/ecs/ecs.config
                echo -e 'ECS_ENABLE_TASK_IAM_ROLE=true' >> /etc/ecs/ecs.config
                echo -e 'ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]' >> /etc/ecs/ecs.config
                echo -e 'ECS_LOGLEVEL=debug' >> /etc/ecs/ecs.config

            02_mkdir:
              command: "mkdir -p /data"
              test: "[ ! -d /data ]"
            03_mkfs:
              command: !If
                - NeedsVolume
                - "mkfs.ext4 /dev/sdh"
                - "echo 'skipping step, no volume'"
            04_mount:
              command: !If
                - NeedsVolume
                - "mount /dev/sdh /data"
                - "echo 'skipping step, no volume to mount'"
              test: "! mountpoint -q /data"

            05_gen_discovery:
              command: !If
                - ShouldSaveDiscovery
                - "/usr/local/bin/gen-discovery.sh"
                - 'echo "S3PathToWriteDiscovery not specified, not writing discovery + credentials to S3"'

            # 06_attach_eni:
            #   command: "/usr/local/bin/attach-eni.sh"
          files:
            # "/usr/local/bin/attach-eni.sh":
            #   mode: "000755"
            #   owner: root
            #   group: root
            #   content: !Sub |
            #     set -x
            #     set -euo pipefail

            #     AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            #     echo "AWS_INSTANCE_ID: $AWS_INSTANCE_ID"

            #     aws ec2 describe-network-interfaces
            #     aws ec2 attach-network-interface \
            #       --network-interface-id ${ServiceENI} \
            #       --instance-id "$AWS_INSTANCE_ID" \
            #       --device-index 1

            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}

            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${ECSCluster}-/var/log/dmesg
                log_stream_name = ${ECSCluster}

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${ECSCluster}-/var/log/messages
                log_stream_name = ${ECSCluster}
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

            "/usr/local/bin/gen-discovery.sh":
              mode: "000755"
              owner: root
              group: root
              content: !Sub |
                #!/bin/bash

                set -x
                set -euo pipefail

                API_KEY=""
                NGINX_ENV_PATH=""

                echo "generating discovery & credentials"

                if [[ -f /data/discovery/nginx.env ]]
                then
                  export $(cat "$NGINX_ENV_PATH" | xargs)
                fi

                mkdir -p /data/discovery/

                if [[ "$API_KEY" ]]
                then
                  echo "api key already exists"
                else
                  echo "generating a new api key"
                  API_KEY=$(openssl rand -base64 40)
                  echo -e "API_KEY=\"$API_KEY\"" > /data/discovery/nginx.env
                fi

                # see kyc.yml for how it's used

                cat <<EOF > /data/discovery/ecs-services.json
                {
                  "apiKey": "$API_KEY",
                  "apiUrl": "http://${ALBUrl}",
                  "services": {
                    "trueface": {
                      "enabled": ${EnableTruefaceSpoof},
                      "path": "${TruefaceSpoofPath}"
                    },
                    "rankone": {
                      "enabled": ${EnableRankOne},
                      "path": "${RankOnePath}"
                    }
                    "findface": {
                      "enabled": ${EnableFindface},
                      "path": "${FindfacePath}"
                    }
                  }
                }
                EOF

                echo "writing discovery + credentials to s3 path: ${S3PathToWriteDiscovery}"
                aws s3 cp --content-type 'application/json' \
                  /data/discovery/ecs-services.json \
                  "s3://${S3PathToWriteDiscovery}"

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80 # will be overridden when ECS registers a task as a target
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 3
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerRule
      - ECSAutoScalingGroup
    Properties:
      DeploymentConfiguration:
        MaximumPercent: 200
        # for no interruption in service, set 100
        MinimumHealthyPercent: 0

      # custom name makes it hard to update the stack, giving errors like this:
      #
      #   CloudFormation cannot update a stack when a custom-named resource requires replacing.
      #   Rename xyz-1-oldname|xyz-1-newname and update the stack again.
      #
      # ServiceName: !Sub ${Namespace}-service
      Cluster: !Ref ECSCluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredTaskCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: nginx-proxy
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      # NetworkConfiguration:
      #   AwsvpcConfiguration:

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Namespace}-ecs-service-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: '*'

  # TaskRole:
  #   Type: AWS::IAM::Role
  #   Condition: ApiIsPrivate
  #   Properties:
  #     Path: /
  #     RoleName: !Sub ${Namespace}-task-role
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: api-key-access
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:HeadObject
  #                 - s3:GetObject
  #               Resource:
  #                 - !Sub arn:aws:s3:::${S3PathAPIKeys}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kyc
      # TaskRoleArn: !If
      #   - ApiIsPrivate
      #   - !Ref TaskRole
      #   - !Ref "AWS::NoValue"
      NetworkMode: bridge
      Volumes:
        - Host:
            SourcePath: /data/discovery
          Name: discovery

      ContainerDefinitions:
        - Image: !Ref NginxImage
          Essential: true
          Cpu: 128
          Memory: 256
          Name: nginx-proxy
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Links:
            - !If
              - UseTruefaceSpoof
              - !Ref TruefaceSpoofPath
              - !Ref AWS::NoValue
            # - !If
            #   - UseTruefaceDash
            #   - !Ref TruefaceDashPath
            #   - !Ref AWS::NoValue
            - !If
              - UseRankOne
              - !Ref RankOnePath
              - !Ref AWS::NoValue
            - !If
              - UseFindface
              - !Ref FindfacePath
              - !Ref AWS::NoValue  
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx-proxy
          Environment:
            - Name: NGINX_ENV_PATH
              Value: /etc/nginx/discovery/nginx.env
            - Name: HOST_TRUEFACE_SPOOF
              Value: !Ref TruefaceSpoofPath
            - Name: PORT_TRUEFACE_SPOOF
              Value: '8085'
            # - Name: HOST_TRUEFACE_DASH
            #   Value: !Ref TruefaceDashPath
            # - Name: PORT_TRUEFACE_DASH
            #   Value: '5000'
            - Name: HOST_RANK_ONE
              Value: !Ref RankOnePath
            - Name: PORT_RANK_ONE
              Value: '8080'
            - Name: HOST_FINDFACE
              Value: !Ref FindfacePath
            - Name: PORT_FINDFACE
              Value: '8000' 
            - Name: ENABLE_TRUEFACE_SPOOF
              Value: !If
                - UseTruefaceSpoof
                - '1'
                - '0'
            # - Name: ENABLE_TRUEFACE_DASH
            #   Value: !If
            #     - UseTruefaceDash
            #     - '1'
            #     - '0'
            - Name: ENABLE_RANK_ONE
              Value: !If
                - UseRankOne
                - '1'
                - '0'
            - Name: ENABLE_FINDFACE
              Value: !If
                - UseFindface
                - '1'
                - '0'
          MountPoints:
            - ContainerPath: /etc/nginx/discovery
              SourceVolume: discovery

        - !If
          - UseTruefaceSpoof
          - Image: !Ref TruefaceSpoofImage
            Essential: true
            Cpu: 256
            Memory: 1024
            Name: !Ref TruefaceSpoofPath
            PortMappings:
              - ContainerPort: 8085
                HostPort: 0
                Protocol: -1
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref TruefaceSpoofPath
          - !Ref "AWS::NoValue"

        # - !If
        #   - UseTruefaceDash
        #   - Image: !Ref TruefaceDashImage
        #     Essential: true
        #     Cpu: 256
        #     Memory: 512
        #     Name: !Ref TruefaceDashPath
        #     PortMappings:
        #       - ContainerPort: 5000
        #         HostPort: 0
        #         Protocol: -1
        #     Links:
        #       - !If
        #         - UseTruefaceSpoof
        #         - !Ref TruefaceSpoofPath
        #         - !Ref "AWS::NoValue"
        #     LogConfiguration:
        #       LogDriver: awslogs
        #       Options:
        #         awslogs-group: !Ref LogGroup
        #         awslogs-region: !Ref AWS::Region
        #         awslogs-stream-prefix: !Ref TruefaceDashPath
        #   - !Ref "AWS::NoValue"

        - !If
          - UseRankOne
          - Image: !Ref RankOneImage
            Essential: true
            Cpu: 256
            Memory: 1024
            Name: !Ref RankOnePath
            PortMappings:
              - ContainerPort: 8080
                HostPort: 0
                Protocol: -1
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref RankOnePath
          - !Ref "AWS::NoValue"
          
        - !If
          - UseFindface
          - Image: !Ref FindfaceImage
            Essential: true
            Cpu: 1024
            Memory: 2048
            Name: !Ref FindfacePath
            PortMappings:
              - ContainerPort: 8000
                HostPort: 0
                Protocol: -1
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref FindfacePath
            MountPoints:
              - ContainerPath: /etc/discovery
                SourceVolume: discovery
          - !Ref "AWS::NoValue"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 3

  # Auto Scaling

  # ServiceAutoScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Action:
  #         - 'sts:AssumeRole'
  #         Effect: Allow
  #         Principal:
  #           Service:
  #           - application-autoscaling.amazonaws.com
  #     Path: /
  #     Policies:
  #     - PolicyName: ecs-service-autoscaling
  #       PolicyDocument:
  #           Statement:
  #             Effect: Allow
  #             Action:
  #             - application-autoscaling:*
  #             - cloudwatch:DescribeAlarms
  #             - cloudwatch:PutMetricAlarm
  #             - ecs:DescribeServices
  #             - ecs:UpdateService
  #             Resource: "*"

  # ServiceScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MaxCapacity: !Ref MaxCount
  #     MinCapacity: !Ref DesiredCount
  #     ResourceId: !Join
  #         - /
  #         - - service
  #           - !Ref ECSCluster
  #           - !GetAtt ECSService.Name
  #     RoleARN: !Ref ServiceAutoScalingRole
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs

  # ServiceScaleOutPolicy:
  #   Type : AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: ServiceScaleOutPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalableTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalLowerBound: 0
  #         ScalingAdjustment: 1

  # ServiceScaleInPolicy:
  #   Type : AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: ServiceScaleInPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalableTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalUpperBound: 0
  #         ScalingAdjustment: -1

  # CPUScaleOutAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: CPU utilization greater than 90%
  #     AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
  #     Namespace: AWS/ECS
  #     MetricName: CPUUtilization
  #     Dimensions:
  #     - Name: ClusterName
  #       Value: !Ref Cluster
  #     - Name: ServiceName
  #       Value: !GetAtt Service.Name
  #     Statistic: Maximum
  #     Period: '60'
  #     EvaluationPeriods: '3'
  #     Threshold: '90'
  #     ComparisonOperator: GreaterThanThreshold
  #     AlarmActions:
  #     - !Ref ServiceScaleOutPolicy

  # CPUScaleInAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: CPU utilization less than 70%
  #     AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
  #     Namespace: AWS/ECS
  #     MetricName: CPUUtilization
  #     Dimensions:
  #     - Name: ClusterName
  #       Value: !Ref Cluster
  #     - Name: ServiceName
  #       Value: !GetAtt Service.Name
  #     Statistic: Maximum
  #     Period: '60'
  #     EvaluationPeriods: '10'
  #     Threshold: '70'
  #     ComparisonOperator: LessThanThreshold
  #     AlarmActions:
  #     - !Ref ServiceScaleInPolicy

Outputs:

  Cluster:
    Description: cluster
    Value: !Ref ECSCluster

  Role:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSRole.Arn

  AutoScalingGroup:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup

  ECSService:
    Description: ECS service for KYC services
    Value: !Ref ECSService

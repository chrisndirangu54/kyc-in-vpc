AWSTemplateFormatVersion: '2010-09-09'
Description: Tradle integrated KYC services
Parameters:
  Namespace:
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id

  Cluster:
    Type: String

  DesiredTaskCount:
    Type: Number

  ALBListener:
    Description: Application Load Balancer listener to register with
    Type: String

  PathPrefix:
    Description: path to register with the Application Load Balancer
    Type: String
    Default: ""

  EnableTruefaceSpoof:
    Type: String

  EnableTruefaceDash:
    Type: String

  EnableRankOne:
    Type: String

  S3PathAPIKeys:
    Type: String
    Default: ""

Conditions:
  UseTruefaceSpoof: !Equals [!Ref EnableTruefaceSpoof, "true"]
  UseTruefaceDash: !Equals [!Ref EnableTruefaceDash, "true"]
  UseRankOne: !Equals [!Ref EnableRankOne, "true"]
  ApiIsPrivate: !Not [!Equals [!Ref S3PathAPIKeys, ""]]

Mappings:
  repo:
    ecr:
      nginx: tradle-kyc-nginx-proxy
      truefaceSpoof: trueface-spoof
      truefaceDash: trueface-dash
      rankOne: roc-face

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80 # will be overridden when ECS registers a task as a target
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Join ["/", [!Ref PathPrefix, "*"]]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerRule
    Properties:
      DeploymentConfiguration:
        MaximumPercent: 200
        # allow ECS to undeploy first
        MinimumHealthyPercent: 100

      # custom name makes it hard to update the stack, giving errors like this:
      #
      #   CloudFormation cannot update a stack when a custom-named resource requires replacing.
      #   Rename xyz-1-oldname|xyz-1-newname and update the stack again.
      #
      # ServiceName: !Sub ${Namespace}-service
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredTaskCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: nginx-proxy
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      # NetworkConfiguration:
      #   AwsvpcConfiguration:

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Namespace}-nginx-service-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Condition: ApiIsPrivate
    Properties:
      Path: /
      RoleName: !Sub ${Namespace}-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: api-key-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${S3PathAPIKeys}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: kyc
      TaskRoleArn: !If
        - ApiIsPrivate
        - !Ref TaskRole
        - !Ref "AWS::NoValue"
      NetworkMode: bridge
      ContainerDefinitions:
        - Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !FindInMap [repo, ecr, nginx], ":latest"]]
          Essential: true
          Cpu: 256
          Memory: 256
          Name: nginx-proxy
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Links:
            - !If
              - UseTruefaceSpoof
              - trueface-spoof
              - !Ref AWS::NoValue
            - !If
              - UseTruefaceDash
              - trueface-dash
              - !Ref AWS::NoValue
            - !If
              - UseRankOne
              - rank-one
              - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx-proxy
          Environment:
            - Name: S3_PATH_TO_API_KEYS
              Value: !Ref S3PathAPIKeys
            - Name: HOST_TRUEFACE_SPOOF
              Value: 'trueface-spoof'
            - Name: PORT_TRUEFACE_SPOOF
              Value: '8085'
            - Name: HOST_TRUEFACE_DASH
              Value: 'trueface-dash'
            - Name: PORT_TRUEFACE_DASH
              Value: '5000'
            - Name: HOST_RANK_ONE
              Value: 'rank-one'
            - Name: PORT_RANK_ONE
              Value: '8080'
            - Name: ENABLE_TRUEFACE_SPOOF
              Value: !If
                - UseTruefaceSpoof
                - '1'
                - '0'
            - Name: ENABLE_TRUEFACE_DASH
              Value: !If
                - UseTruefaceDash
                - '1'
                - '0'
            - Name: ENABLE_RANK_ONE
              Value: !If
                - UseRankOne
                - '1'
                - '0'

        - !If
          - UseTruefaceSpoof
          - Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !FindInMap [repo, ecr, truefaceSpoof], ":latest"]]
            Essential: true
            Cpu: 512
            Memory: 512
            Name: trueface-spoof
            PortMappings:
              - ContainerPort: 8085
                HostPort: 0
                Protocol: tcp
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: trueface-spoof
          - !Ref "AWS::NoValue"

        - !If
          - UseTruefaceDash
          - Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !FindInMap [repo, ecr, truefaceDash], ":latest"]]
            Essential: true
            Cpu: 512
            Memory: 512
            Name: trueface-dash
            PortMappings:
              - ContainerPort: 5000
                HostPort: 0
                Protocol: tcp
            Links:
              - !If
                - UseTruefaceSpoof
                - trueface-spoof
                - !Ref "AWS::NoValue"
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: trueface-dash
          - !Ref "AWS::NoValue"

        - !If
          - UseRankOne
          - Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !FindInMap [repo, ecr, rankOne], ":latest"]]
            Essential: true
            Cpu: 512
            Memory: 512
            Name: rank-one
            PortMappings:
              - ContainerPort: 8080
                HostPort: 0
                Protocol: tcp
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: rank-one
          - !Ref "AWS::NoValue"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 3

Outputs:
  ECSService:
    Description: ECS service for KYC services
    Value: !Ref ECSService

events {
  worker_connections 768;
}

http {
  # NGINX will handle gzip compression of responses from the app server
  gzip on;
  gzip_proxied any;
  gzip_types text/plain application/json;
  gzip_min_length 1000;

  server {
    listen 80;

    location /health {
      return 200;
    }

    # TODO: generate these blocks
    # instead of copy pasting them

    location /${HOST_TRUEFACE_SPOOF}/ {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
        return 405;
      }

      # empty string if not set
      set $expected_host '${HOST_TRUEFACE_SPOOF}';
      if ($expected_auth == '') {
        return 404;
      }

      set $expected_auth '${API_KEY}';
      # empty string if not set
      set $auth $http_authorization;
      if ($expected_auth != $auth) {
        return 403;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      proxy_pass http://${HOST_TRUEFACE_SPOOF}/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
    }

    location /${HOST_TRUEFACE_DASH}/ {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
        return 405;
      }

      # empty string if not set
      set $expected_host '${HOST_TRUEFACE_DASH}';
      if ($expected_auth == '') {
        return 404;
      }

      set $expected_auth '${API_KEY}';
      # empty string if not set
      set $auth $http_authorization;
      if ($expected_auth != $auth) {
        return 403;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      proxy_pass http://${HOST_TRUEFACE_DASH}/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
    }
  }
}
